#!/usr/bin/env python3
"""
Test r√°pido para verificar el fix con el texto espec√≠fico del usuario.
"""
import requests
import json

def test_rapido():
    """Test r√°pido con el texto del usuario."""
    
    # Texto espec√≠fico del usuario
    texto = """Esto no se queda en el periodismo. Las editoriales y los lectores hoy por hoy agradecen los libros narrativos cortos, novelas fragmentadas y relatos breves: un objeto liviano que puedan leer de a sorbos en no m√°s de una semana (yo misma escribo as√≠). Porque ya es poca la concentraci√≥n y el tiempo que nos queda, y porque nos hemos acostumbrado a la rapidez de ese clickbait y de las redes sociales. As√≠, muchos libros de no ficci√≥n, de autoayuda, autobiogr√°ficos o incluso narrativos est√°n siguiendo esta l√≠nea para acelerar su lectura y no perder audiencia. Adem√°s, no solo se escriben livianos, sino que se leer√°n cada vez m√°s livianos. Hoy existen apps donde puedes subir un libro en pdf y pedirle que te lo resuma en dos l√≠neas. Queremos leer as√≠ porque no hay tiempo, porque a la d√©cima l√≠nea nos distraemos, nos aburrimos, miramos TikTok, vamos a la cocina a hacernos un caf√© y luego olvidamos retomarlo. ¬øPor qu√© leerlo completo si puedo pedirle a un robot el famoso TLDR"""
    
    print(f"üîç Testing texto de {len(texto)} caracteres")
    print("üì§ Enviando a /translate...")
    
    response = requests.post('http://localhost:8000/translate', json={
        "text": texto,
        "direction": "es-da"
    }, timeout=60)
    
    if response.status_code == 200:
        data = response.json()
        result = data["translations"][0]
        
        print(f"‚úÖ Status: {response.status_code}")
        print(f"üìè Original:  {len(texto)} chars")
        print(f"üìè Traducido: {len(result)} chars")
        print(f"üìä Ratio:     {len(result)/len(texto):.2%}")
        
        # Verificar si tiene el final
        if "TLDR" in texto:
            if any(word in result.lower() for word in ["tldr", "robot", "completo"]):
                print("‚úÖ √âXITO: El final est√° presente")
            else:
                print("‚ùå PROBLEMA: El final se perdi√≥")
                print(f"Original final: '...{texto[-50:]}'")
                print(f"Traducido final: '...{result[-50:]}'")
        
        print(f"\nüìù Traducci√≥n completa:")
        print("-" * 60)
        print(result)
        print("-" * 60)
        
        return len(result) > len(texto) * 0.7  # Al menos 70% de la longitud
        
    else:
        print(f"‚ùå Error: {response.status_code}")
        print(response.text)
        return False

if __name__ == "__main__":
    try:
        # Verificar servidor
        health = requests.get('http://localhost:8000/health', timeout=5)
        if health.status_code != 200 or not health.json().get('model_loaded'):
            print("‚ùå Servidor no listo. Ejecuta: python start_server.py")
            exit(1)
            
        success = test_rapido()
        if success:
            print("\nüéâ TEST PAS√ì - Traducci√≥n completa")
        else:
            print("\n‚ùå TEST FALL√ì - Posible truncado")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        print("Aseg√∫rate de que el servidor est√© corriendo en http://localhost:8000")
