#!/usr/bin/env python3
"""
Test espec√≠fico para el texto que reporta el usuario.
"""
import requests
import json
import sys

def test_texto_usuario():
    """Test con el texto espec√≠fico del usuario."""
    print("üîç TEST CON TEXTO ESPEC√çFICO DEL USUARIO")
    print("=" * 60)
    
    texto_original = """Esto no se queda en el periodismo. Las editoriales y los lectores hoy por hoy agradecen los libros narrativos cortos, novelas fragmentadas y relatos breves: un objeto liviano que puedan leer de a sorbos en no m√°s de una semana (yo misma escribo as√≠). Porque ya es poca la concentraci√≥n y el tiempo que nos queda, y porque nos hemos acostumbrado a la rapidez de ese clickbait y de las redes sociales. As√≠, muchos libros de no ficci√≥n, de autoayuda, autobiogr√°ficos o incluso narrativos est√°n siguiendo esta l√≠nea para acelerar su lectura y no perder audiencia. Adem√°s, no solo se escriben livianos, sino que se leer√°n cada vez m√°s livianos. Hoy existen apps donde puedes subir un libro en pdf y pedirle que te lo resuma en dos l√≠neas. Queremos leer as√≠ porque no hay tiempo, porque a la d√©cima l√≠nea nos distraemos, nos aburrimos, miramos TikTok, vamos a la cocina a hacernos un caf√© y luego olvidamos retomarlo. ¬øPor qu√© leerlo completo si puedo pedirle a un robot el famoso TLDR"""
    
    traduccion_esperada_completa = """Det er ikke journalistikken, der holder. Redaktioner og l√¶sere i dag takker for korte fort√¶llingsb√∏ger, fragmenterede noveller og kortfort√¶llinger: et let genstand, som man kan l√¶se af sig selv p√• mindst en uge (jeg skriver s√•dan). Fordi vi allerede har lidt koncentration og tid tilbage, og fordi vi er vant til hurtigheden med denne clickbait og de sociale medier. S√• mange boger uden fiktion, selvhj√¶lp, autobiografi eller endda fort√¶lling f√∏lger denne linje for at fremskynde sin l√¶sning og undg√• at miste publikum. Desuden bliver det ikke kun lettere skrevet, men vil blive mere lett. I dag findes apps hvor du kan downloade en pdf-bog og bede dig om at opsummere den online."""
    
    print(f"üìè Texto original: {len(texto_original)} caracteres")
    print(f"üìè Traducci√≥n esperada completa: {len(traduccion_esperada_completa)} caracteres")
    
    # Test 1: Modo Auto (sin max_new_tokens)
    print("\nüß™ TEST 1: Modo Auto")
    payload = {
        "text": texto_original,
        "direction": "es-da"
        # Sin max_new_tokens - deber√≠a usar c√°lculo adaptativo
    }
    
    try:
        print("üì§ Enviando request al servidor...")
        response = requests.post('http://localhost:8000/translate', json=payload, timeout=120)
        
        print(f"üìä Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            traduccion_obtenida = data["translations"][0]
            
            print(f"\nüìè RESULTADOS:")
            print(f"   Original:    {len(texto_original)} chars")
            print(f"   Obtenida:    {len(traduccion_obtenida)} chars")
            print(f"   Esperada:    {len(traduccion_esperada_completa)} chars")
            print(f"   Ratio:       {len(traduccion_obtenida)/len(texto_original):.2%}")
            
            # Verificar si est√° truncada comparando con la esperada
            diferencia_pct = abs(len(traduccion_obtenida) - len(traduccion_esperada_completa)) / len(traduccion_esperada_completa)
            
            print(f"\nüìù TRADUCCI√ìN OBTENIDA:")
            print("-" * 50)
            print(traduccion_obtenida)
            print("-" * 50)
            
            print(f"\nüìù TRADUCCI√ìN ESPERADA:")
            print("-" * 50)
            print(traduccion_esperada_completa)
            print("-" * 50)
            
            # Verificar si se perdi√≥ el final
            texto_original_final = "¬øPor qu√© leerlo completo si puedo pedirle a un robot el famoso TLDR"
            if texto_original_final in texto_original:
                if "TLDR" in traduccion_obtenida or "robot" in traduccion_obtenida.lower():
                    print("‚úÖ FINAL PRESENTE: La parte final parece estar traducida")
                else:
                    print("‚ùå FINAL PERDIDO: La parte final se perdi√≥ en la traducci√≥n")
                    
                    # Buscar d√≥nde se corta
                    palabras_finales = ["TLDR", "robot", "completo"]
                    for palabra in palabras_finales:
                        if palabra.lower() in texto_original.lower():
                            pos_original = texto_original.lower().find(palabra.lower())
                            print(f"   Palabra '{palabra}' en posici√≥n {pos_original} del original")
            
            # An√°lisis de truncado
            if len(traduccion_obtenida) < len(traduccion_esperada_completa) * 0.8:
                print(f"\n‚ùå PROBLEMA CONFIRMADO: Traducci√≥n truncada")
                print(f"   Diferencia: {len(traduccion_esperada_completa) - len(traduccion_obtenida)} caracteres")
                return False
            else:
                print(f"\n‚úÖ Traducci√≥n parece completa (diferencia < 20%)")
                return True
                
        else:
            print(f"‚ùå Error HTTP {response.status_code}")
            print(f"Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Excepci√≥n: {e}")
        return False

def test_health():
    """Verifica que el servidor est√© funcionando."""
    try:
        response = requests.get('http://localhost:8000/health', timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"üè• Servidor: {data.get('status', 'unknown')}")
            print(f"ü§ñ Modelo: {'‚úÖ Cargado' if data.get('model_loaded') else '‚ùå No cargado'}")
            return data.get('model_loaded', False)
        else:
            print(f"‚ùå Health check fall√≥: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå No se puede conectar: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ INICIANDO TEST ESPEC√çFICO")
    
    if not test_health():
        print("\n‚ùå El servidor no est√° listo.")
        print("   Ejecuta: python start_server.py")
        sys.exit(1)
    
    print("\n" + "=" * 60)
    
    success = test_texto_usuario()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ Traducci√≥n completa - no hay truncado")
    else:
        print("‚ùå CONFIRMADO: Hay truncado - necesitamos investigar m√°s")
        print("\nüí° Revisa los logs del servidor para ver qu√© max_new_tokens se est√° usando")
